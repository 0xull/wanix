FROM alpine:latest AS js
WORKDIR /build
RUN apk add --no-cache nodejs npm esbuild
COPY ./runtime/package.json .
RUN npm install
COPY ./runtime .
RUN esbuild index.ts \
            --bundle \
            # --minify \
            --format=esm \
            --loader:.go.js=text \
            --loader:.tinygo.js=text \
            --outfile=wanix.min.js
RUN esbuild wasi/mod.ts \
            --bundle \
            --minify \
            --format=esm \
            --outfile=lib.js
CMD ["/bin/sh", "-c", "cp /build/wanix.min.js /output/assets/ && cp /build/lib.js /output/wasi/worker/"]


FROM golang:1.24.5-alpine AS wasm-go
WORKDIR /build
RUN apk add --no-cache make
COPY ./hack/cbor ./hack/cbor
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN make wasm-go
CMD ["/bin/sh", "-c", "cp -f /build/runtime/assets/wanix.go.wasm /output/"]


FROM tinygo/tinygo:0.38.0 AS wasm-tinygo
WORKDIR /build
COPY . .
ENV GOFLAGS="-buildvcs=false"
USER root
RUN make wasm-tinygo
CMD ["/bin/sh", "-c", "cp -f /build/runtime/assets/wanix.tinygo.wasm /output/"]


FROM alpine:latest AS runtime
WORKDIR /build
COPY --from=js /build/lib.js /build/wasi/worker/lib.js
COPY --from=js /build/wanix.min.js /build/wanix.min.js
COPY --from=wasm-go /build/runtime/assets/wanix.go.wasm /build/wanix.go.wasm
COPY --from=wasm-tinygo /build/runtime/assets/wanix.tinygo.wasm /build/wanix.tinygo.wasm
CMD ["/bin/sh", "-c", "cp -rf /build/* /output/ 2>/dev/null || true"]